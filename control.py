# -*- coding: utf-8 -*-
"""
Sistema de Controle e Gerenciamento CNPJ
=========================================

Este script gerencia todos os processos relacionados ao sistema CNPJ:
- Control: Monitoramento e verifica√ß√£o
- Process: Gerenciamento de processos em background
- Database: Configura√ß√£o interativa de conex√£o com banco de dados
"""

import os
import sys
import time
import logging
import sqlalchemy
from sqlalchemy import text
from datetime import datetime
import psutil
import subprocess
import json
import signal
import getpass

# Dicion√°rio para armazenar processos ativos
processos_ativos = {}

def configurar_logging():
    """Configura logging simples"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def conectar_banco():
    """Conecta ao banco usando configura√ß√£o salva"""
    try:
        if not os.path.exists('cnpj_config.json'):
            print("Arquivo de configura√ß√£o n√£o encontrado!")
            return None
            
        with open('cnpj_config.json', 'r') as f:
            config = json.load(f)
        
        # Conectar ao banco
        if config['tipo_banco'] == 'mysql':
            port = config.get('port', 3306)
            engine_url = f"mysql+pymysql://{config['username']}:{config['password']}@{config['host']}:{port}/{config['dbname']}"
        else:
            port = config.get('port', 5432)
            engine_url = f"postgresql://{config['username']}:{config['password']}@{config['host']}:{port}/{config['dbname']}"
        
        engine = sqlalchemy.create_engine(engine_url)
        
        # Testar conex√£o
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        
        print(f"‚úì Conectado ao banco {config['dbname']} ({config['tipo_banco']})")
        return engine
        
    except Exception as e:
        print(f"‚úó Erro ao conectar: {str(e)}")
        return None





def verificar_contadores(engine):
    """Verifica contadores das tabelas principais"""
    try:
        with engine.connect() as conn:
            # Verificar tabelas principais
            tabelas = ['estabelecimento', 'empresas', 'socios_original', 'simples', 'cnae', 'motivo', 'municipio', 'natureza_juridica', 'pais', 'qualificacao_socio']
            
            print("\n" + "="*60)
            print("CONTADORES EM TEMPO REAL")
            print("="*60)
            
            for tabela in tabelas:
                try:
                    result = conn.execute(text(f"SELECT COUNT(*) as total FROM {tabela}"))
                    total = result.fetchone()[0]
                    print(f"  {tabela:20}: {total:>10,} registros")
                except Exception as e:
                    print(f"  {tabela:20}: {'ERRO':>10} - {str(e)}")
            
            print("="*60)
            
    except Exception as e:
        print(f"Erro ao verificar contadores: {str(e)}")

def verificar_ultimos_registros(engine):
    """Verifica os √∫ltimos registros inseridos"""
    try:
        with engine.connect() as conn:
            print("\n√öLTIMOS REGISTROS INSERIDOS:")
            print("-" * 40)
            
            # Verificar estabelecimento (tabela principal)
            try:
                result = conn.execute(text("""
                    SELECT cnpj_basico, nome_fantasia, uf, municipio 
                    FROM estabelecimento 
                    ORDER BY cnpj_basico DESC 
                    LIMIT 5
                """))
                
                registros = result.fetchall()
                if registros:
                    print("Estabelecimento (√∫ltimos 5):")
                    for reg in registros:
                        print(f"  CNPJ: {reg[0]}, Nome: {reg[1][:30]}, UF: {reg[2]}, Munic√≠pio: {reg[3]}")
                else:
                    print("  Nenhum registro na tabela estabelecimento")
                    
            except Exception as e:
                print(f"  Erro ao verificar estabelecimento: {str(e)}")
            
            # Verificar empresas
            try:
                result = conn.execute(text("""
                    SELECT cnpj_basico, razao_social, porte_empresa 
                    FROM empresas 
                    ORDER BY cnpj_basico DESC 
                    LIMIT 3
                """))
                
                registros = result.fetchall()
                if registros:
                    print("\nEmpresas (√∫ltimos 3):")
                    for reg in registros:
                        print(f"  CNPJ: {reg[0]}, Raz√£o: {reg[1][:40]}, Porte: {reg[2]}")
                else:
                    print("  Nenhum registro na tabela empresas")
                    
            except Exception as e:
                print(f"  Erro ao verificar empresas: {str(e)}")
                
    except Exception as e:
        print(f"Erro ao verificar √∫ltimos registros: {str(e)}")

def monitorar_insercao(engine, intervalo=30):
    """Monitora a inser√ß√£o de dados em tempo real"""
    print(f"\nüîç MONITORANDO INSER√á√ÉO DE DADOS (a cada {intervalo} segundos)")
    print("Pressione Ctrl+C para parar\n")
    
    try:
        while True:
            # Limpar tela (simples)
            os.system('clear')
            
            # Mostrar timestamp
            print(f"üìä VERIFICA√á√ÉO: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Verificar contadores
            verificar_contadores(engine)
            
            # Verificar √∫ltimos registros
            verificar_ultimos_registros(engine)
            
            print(f"\n‚è∞ Pr√≥xima verifica√ß√£o em {intervalo} segundos...")
            print("Pressione Ctrl+C para parar")
            
            time.sleep(intervalo)
            
    except KeyboardInterrupt:
        print("\n\nüõë Monitoramento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro no monitoramento: {str(e)}")

def verificar_sistema():
    """Verifica dados de processamento, mem√≥ria e disco"""
    try:
        print("\n" + "="*60)
        print("INFORMA√á√ïES DO SISTEMA")
        print("="*60)
        
        # Informa√ß√µes de CPU
        print("\nüñ•Ô∏è  PROCESSAMENTO:")
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_count = psutil.cpu_count()
        cpu_freq = psutil.cpu_freq()
        print(f"  Uso de CPU: {cpu_percent}%")
        print(f"  N√∫cleos: {cpu_count}")
        if cpu_freq:
            print(f"  Frequ√™ncia: {cpu_freq.current:.1f} MHz")
        
        # Informa√ß√µes de mem√≥ria
        print("\nüíæ MEM√ìRIA:")
        memory = psutil.virtual_memory()
        print(f"  Total: {memory.total / (1024**3):.1f} GB")
        print(f"  Dispon√≠vel: {memory.available / (1024**3):.1f} GB")
        print(f"  Usada: {memory.used / (1024**3):.1f} GB")
        print(f"  Percentual usado: {memory.percent}%")
        
        # Informa√ß√µes de disco
        print("\nüíø DISCO:")
        disk = psutil.disk_usage('/')
        print(f"  Total: {disk.total / (1024**3):.1f} GB")
        print(f"  Usado: {disk.used / (1024**3):.1f} GB")
        print(f"  Livre: {disk.free / (1024**3):.1f} GB")
        print(f"  Percentual usado: {disk.percent}%")
        
        # Verificar espa√ßo na pasta de dados
        pasta_dados = "dados-publicos"
        if os.path.exists(pasta_dados):
            try:
                total_size = sum(os.path.getsize(os.path.join(dirpath, filename))
                    for dirpath, dirnames, filenames in os.walk(pasta_dados)
                    for filename in filenames)
                print(f"  Pasta dados: {total_size / (1024**3):.1f} GB")
            except Exception as e:
                print(f"  Pasta dados: Erro ao calcular tamanho - {str(e)}")
        
        # Informa√ß√µes de rede (opcional)
        print("\nüåê REDE:")
        try:
            net_io = psutil.net_io_counters()
            print(f"  Bytes enviados: {net_io.bytes_sent / (1024**2):.1f} MB")
            print(f"  Bytes recebidos: {net_io.bytes_recv / (1024**2):.1f} MB")
        except Exception as e:
            print(f"  Erro ao obter informa√ß√µes de rede: {str(e)}")
        
        print("="*60)
        
    except Exception as e:
        print(f"Erro ao verificar sistema: {str(e)}")

def executar_limpar_banco():
    """Executa o script limpar_banco.py"""
    try:
        print("\n" + "="*60)
        print("EXECUTANDO SCRIPT DE LIMPEZA DO BANCO")
        print("="*60)
        print("‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° APAGAR TODOS OS DADOS das tabelas!")
        print("="*60)
        
        # Confirmar execu√ß√£o
        resp = input("\nTem certeza que deseja executar a limpeza? (S/N): ").strip()
        if resp.upper() != 'S':
            print("Opera√ß√£o cancelada pelo usu√°rio")
            return
        
        # Verificar se o arquivo existe
        if not os.path.exists('limpar_banco.py'):
            print("‚ùå Arquivo 'limpar_banco.py' n√£o encontrado!")
            return
        
        # Executar o script
        print("\nüöÄ Executando script de limpeza...")
        
        try:
            # Executar o script em um processo separado
            result = subprocess.run([sys.executable, 'limpar_banco.py'], 
                                  capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("‚úÖ Script de limpeza executado com sucesso!")
                if result.stdout:
                    print("\nSa√≠da do script:")
                    print(result.stdout)
            else:
                print("‚ùå Erro na execu√ß√£o do script de limpeza!")
                if result.stderr:
                    print("\nErros:")
                    print(result.stderr)
                    
        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout: O script demorou mais de 5 minutos para executar")
        except Exception as e:
            print(f"‚ùå Erro ao executar script: {str(e)}")
            
    except Exception as e:
        print(f"Erro ao executar limpeza: {str(e)}")

def menu_control():
    """Menu do Control - Monitoramento e verifica√ß√£o"""
    # Conectar ao banco
    engine = conectar_banco()
    if not engine:
        print("‚ùå N√£o foi poss√≠vel conectar ao banco. Verifique a configura√ß√£o.")
        return
    
    while True:
        print("\n" + "="*60)
        print("CONTROL - MONITORAMENTO E VERIFICA√á√ÉO")
        print("="*60)
        print("1. Verificar contadores atual")
        print("2. Verificar √∫ltimos registros")
        print("3. Monitorar inser√ß√£o em tempo real (30s)")
        print("4. Monitorar inser√ß√£o em tempo real (10s)")
        print("5. Verificar sistema (CPU, Mem√≥ria, Disco)")
        print("6. Executar limpeza do banco")
        print("7. Voltar ao menu principal")
        
        opcao = input("\nEscolha uma op√ß√£o (1-7): ").strip()
        
        if opcao == '1':
            verificar_contadores(engine)
        elif opcao == '2':
            verificar_ultimos_registros(engine)
        elif opcao == '3':
            monitorar_insercao(engine, 30)
        elif opcao == '4':
            monitorar_insercao(engine, 10)
        elif opcao == '5':
            verificar_sistema()
        elif opcao == '6':
            executar_limpar_banco()
        elif opcao == '7':
            break
        else:
            print("Op√ß√£o inv√°lida!")
    
    # Fechar conex√£o
    engine.dispose()
    print("‚úÖ Conex√£o com o banco fechada")

def listar_processos():
    """Lista todos os processos ativos"""
    # Primeiro atualizar o status dos processos
    atualizar_status_processos_silencioso()
    
    print("\n" + "="*80)
    print("PROCESSOS ATIVOS")
    print("="*80)
    
    if not processos_ativos:
        print("Nenhum processo ativo encontrado.")
        return
    
    # Converter para lista numerada
    processos_lista = list(processos_ativos.items())
    
    for i, (script, info) in enumerate(processos_lista, 1):
        status = "üü¢" if info['status'] == 'running' else "üî¥"
        tempo_execucao = datetime.now() - info['inicio']
        print(f"{i:2d}. {status} {script}")
        print(f"    PID: {info['pid']}")
        print(f"    Status: {info['status']}")
        print(f"    In√≠cio: {info['inicio'].strftime('%H:%M:%S')}")
        print(f"    Tempo: {tempo_execucao}")
        print(f"    Log: {info['log_file']}")
        print()

def ver_log_processo(numero):
    """Mostra o log de um processo espec√≠fico por n√∫mero"""
    try:
        numero = int(numero)
        if numero < 1 or numero > len(processos_ativos):
            print(f"‚ùå N√∫mero inv√°lido! Escolha entre 1 e {len(processos_ativos)}")
            return
        
        # Obter script pelo n√∫mero
        processos_lista = list(processos_ativos.keys())
        script_name = processos_lista[numero - 1]
        
        info = processos_ativos[script_name]
        log_file = info['log_file']
        
        if not os.path.exists(log_file):
            print(f"‚ùå Arquivo de log '{log_file}' n√£o encontrado!")
            return
        
        print(f"\nüìã LOG DO PROCESSO: {script_name}")
        print(f"Arquivo: {log_file}")
        print("="*60)
        
        try:
            with open(log_file, 'r') as f:
                # Mostrar √∫ltimas 50 linhas
                linhas = f.readlines()
                if len(linhas) > 50:
                    print("... (mostrando √∫ltimas 50 linhas)")
                    linhas = linhas[-50:]
                
                for linha in linhas:
                    print(linha.rstrip())
                    
        except Exception as e:
            print(f"‚ùå Erro ao ler log: {str(e)}")
            
    except ValueError:
        print("‚ùå Por favor, digite um n√∫mero v√°lido!")

def parar_processo(numero):
    """Para um processo espec√≠fico por n√∫mero"""
    try:
        numero = int(numero)
        if numero < 1 or numero > len(processos_ativos):
            print(f"‚ùå N√∫mero inv√°lido! Escolha entre 1 e {len(processos_ativos)}")
            return
        
        # Obter script pelo n√∫mero
        processos_lista = list(processos_ativos.keys())
        script_name = processos_lista[numero - 1]
        
        info = processos_ativos[script_name]
        pid = info['pid']
        
        try:
            # Primeiro verificar se o processo ainda existe
            try:
                os.kill(pid, 0)  # Verificar se processo existe
            except OSError:
                print(f"‚úÖ Processo {pid} ({script_name}) j√° terminou")
                del processos_ativos[script_name]
                return
            
            # Tentar parar o processo
            os.kill(pid, signal.SIGTERM)
            print(f"üõë Enviado sinal de parada para processo {pid} ({script_name})")
            
            # Aguardar um pouco e verificar se parou
            time.sleep(2)
            try:
                os.kill(pid, 0)  # Verificar se processo ainda existe
                # Se chegou aqui, processo ainda est√° rodando, for√ßar parada
                os.kill(pid, signal.SIGKILL)
                print(f"üíÄ Processo {pid} for√ßado a parar")
                time.sleep(1)  # Aguardar um pouco mais
            except OSError:
                print(f"‚úÖ Processo {pid} parou com sucesso")
            
            # Remover do dicion√°rio
            del processos_ativos[script_name]
            
        except Exception as e:
            print(f"‚ùå Erro ao parar processo: {str(e)}")
            
    except ValueError:
        print("‚ùå Por favor, digite um n√∫mero v√°lido!")

def menu_process():
    """Menu de gerenciamento de processos"""
    while True:
        print("\n" + "="*60)
        print("PROCESS - GERENCIAMENTO DE PROCESSOS")
        print("="*60)
        print("1. Listar processos ativos")
        print("2. Ver log de um processo")
        print("3. Parar processo")
        print("4. Atualizar status dos processos")
        print("5. Voltar ao menu principal")
        
        opcao = input("\nEscolha uma op√ß√£o (1-5): ").strip()
        
        if opcao == '1':
            listar_processos()
        elif opcao == '2':
            if processos_ativos:
                print("\nProcessos dispon√≠veis:")
                listar_processos()
                numero = input("\nDigite o n√∫mero do processo: ").strip()
                ver_log_processo(numero)
            else:
                print("Nenhum processo ativo para verificar logs.")
        elif opcao == '3':
            if processos_ativos:
                print("\nProcessos dispon√≠veis:")
                listar_processos()
                numero = input("\nDigite o n√∫mero do processo para parar: ").strip()
                parar_processo(numero)
            else:
                print("Nenhum processo ativo para parar.")
        elif opcao == '4':
            atualizar_status_processos()
        elif opcao == '5':
            break
        else:
            print("Op√ß√£o inv√°lida!")

def configurar_database():
    """Configurar conex√£o com banco de dados"""
    print("\n" + "="*60)
    print("DATABASE - CONFIGURA√á√ÉO DE CONEX√ÉO")
    print("="*60)
    
    # Verificar se j√° existe configura√ß√£o
    config_existente = None
    if os.path.exists('cnpj_config.json'):
        try:
            with open('cnpj_config.json', 'r', encoding='utf-8') as f:
                config_existente = json.load(f)
            print("üìã Configura√ß√£o atual encontrada:")
            print(f"  Tipo de banco: {config_existente.get('tipo_banco', 'N/A')}")
            print(f"  Host: {config_existente.get('host', 'N/A')}")
            print(f"  Porta: {config_existente.get('port', 'N/A')}")
            print(f"  Banco de dados: {config_existente.get('dbname', 'N/A')}")
            print(f"  Usu√°rio: {config_existente.get('username', 'N/A')}")
            print()
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao ler configura√ß√£o existente: {str(e)}")
            config_existente = None
    
    print("üîß Configure a conex√£o com o banco de dados:")
    print()
    
    # Tipo de banco
    print("Tipo de banco dispon√≠vel:")
    print("  PostgreSQL")
    
    tipo_banco = 'postgres'
    porta_padrao = 5432
    
    print(f"\n‚úÖ Tipo selecionado: {tipo_banco.upper()}")
    
    # Configura√ß√µes de conex√£o
    print("\nüì° Configura√ß√µes de conex√£o:")
    
    # Host
    host_atual = config_existente.get('host', '127.0.0.1') if config_existente else '127.0.0.1'
    host = input(f"Host [{host_atual}]: ").strip() or host_atual
    
    # Porta
    porta_atual = config_existente.get('port', porta_padrao) if config_existente else porta_padrao
    while True:
        porta_input = input(f"Porta [{porta_atual}]: ").strip()
        if not porta_input:
            porta = porta_atual
            break
        try:
            porta = int(porta_input)
            if 1 <= porta <= 65535:
                break
            else:
                print("‚ùå Porta deve estar entre 1 e 65535!")
        except ValueError:
            print("‚ùå Porta deve ser um n√∫mero!")
    
    # Nome do banco
    dbname_atual = config_existente.get('dbname', 'cnpjbr') if config_existente else 'cnpjbr'
    dbname = input(f"Nome do banco de dados [{dbname_atual}]: ").strip() or dbname_atual
    
    # Usu√°rio
    username_atual = config_existente.get('username', 'postgres') if config_existente else 'postgres'
    username = input(f"Usu√°rio [{username_atual}]: ").strip() or username_atual
    
    # Senha
    senha_atual = config_existente.get('password', '') if config_existente else ''
    if senha_atual:
        usar_senha_atual = input(f"Usar senha atual? (S/N) [S]: ").strip().upper()
        if usar_senha_atual in ['', 'S', 'SIM']:
            password = senha_atual
        else:
            password = getpass.getpass("Nova senha: ")
    else:
        password = getpass.getpass("Senha: ")
    
    # Criar objeto de configura√ß√£o
    config = {
        'tipo_banco': tipo_banco,
        'host': host,
        'port': porta,
        'dbname': dbname,
        'username': username,
        'password': password
    }
    
    # Mostrar resumo
    print("\n" + "="*60)
    print("RESUMO DA CONFIGURA√á√ÉO")
    print("="*60)
    print(f"Tipo de banco: {config['tipo_banco'].upper()}")
    print(f"Host: {config['host']}")
    print(f"Porta: {config['port']}")
    print(f"Banco de dados: {config['dbname']}")
    print(f"Usu√°rio: {config['username']}")
    print(f"Senha: {'*' * len(config['password'])}")
    print()
    
    # Confirmar salvamento
    confirmar = input("Salvar esta configura√ß√£o? (S/N) [S]: ").strip().upper()
    if confirmar in ['', 'S', 'SIM']:
        try:
            # Salvar configura√ß√£o
            with open('cnpj_config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
            
            print("‚úÖ Configura√ß√£o salva com sucesso em 'cnpj_config.json'!")
            
            # Testar conex√£o
            testar = input("\nTestar conex√£o agora? (S/N) [S]: ").strip().upper()
            if testar in ['', 'S', 'SIM']:
                print("\nüîç Testando conex√£o...")
                engine = conectar_banco()
                if engine:
                    print("‚úÖ Conex√£o testada com sucesso!")
                    engine.dispose()
                else:
                    print("‚ùå Falha no teste de conex√£o. Verifique as configura√ß√µes.")
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar configura√ß√£o: {str(e)}")
    else:
        print("‚ùå Configura√ß√£o n√£o salva.")
    
    input("\nPressione Enter para continuar...")

def atualizar_status_processos_silencioso():
    """Atualiza o status de todos os processos ativos sem mostrar mensagens"""
    processos_para_remover = []
    
    for script, info in processos_ativos.items():
        try:
            # Verificar se processo ainda existe
            os.kill(info['pid'], 0)
            info['status'] = 'running'
        except OSError:
            # Processo n√£o existe mais
            info['status'] = 'finished'
            processos_para_remover.append(script)
    
    # Remover processos finalizados
    for script in processos_para_remover:
        del processos_ativos[script]
    
    return len(processos_para_remover)

def atualizar_status_processos():
    """Atualiza o status de todos os processos ativos"""
    print("üîÑ Atualizando status dos processos...")
    
    processos_removidos = atualizar_status_processos_silencioso()
    
    if processos_removidos > 0:
        print(f"üîÑ {processos_removidos} processo(s) atualizado(s)")
    else:
        print("‚úÖ Todos os processos est√£o rodando")

def main():
    """Fun√ß√£o principal - Menu principal"""
    print("=" * 80)
    print("SISTEMA DE CONTROLE E GERENCIAMENTO CNPJ")
    print("=" * 80)
    
    while True:
        print("\nMENU PRINCIPAL:")
        print("1. Control - Monitoramento e verifica√ß√£o")
        print("2. Process - Gerenciamento de processos")
        print("3. Database - Configurar conex√£o")
        print("4. Sair")
        
        opcao = input("\nEscolha uma op√ß√£o (1-4): ").strip()
        
        if opcao == '1':
            menu_control()
        elif opcao == '2':
            menu_process()
        elif opcao == '3':
            configurar_database()
        elif opcao == '4':
            print("\nüëã Encerrando sistema...")
            # Parar todos os processos ativos
            if processos_ativos:
                print("üõë Parando processos ativos...")
                for script in list(processos_ativos.keys()):
                    parar_processo(script)
            break
        else:
            print("Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë Sistema interrompido pelo usu√°rio")
        # Parar todos os processos ativos
        if processos_ativos:
            print("üõë Parando processos ativos...")
            for script in list(processos_ativos.keys()):
                parar_processo(script)
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {str(e)}")
        sys.exit(1)
